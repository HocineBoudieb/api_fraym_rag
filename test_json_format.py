#!/usr/bin/env python3
"""
Script de test pour v√©rifier que l'IA r√©pond au format JSON sp√©cifi√©
"""

import requests
import json
import sys

def test_json_response():
    """Teste si l'IA r√©pond au format JSON correct"""
    
    # URL de l'API
    url = "http://localhost:8000/query"
    
    # Questions de test
    test_queries = [
        "Montre-moi la liste des produits disponibles",
        "Cr√©er une page d'accueil pour notre boutique",
        "Affiche les smartphones disponibles",
        "Cr√©er un tableau de bord pour les ventes"
    ]
    
    print("üß™ Test du format JSON de r√©ponse...\n")
    
    for i, query in enumerate(test_queries, 1):
        print(f"üìù Test {i}: {query}")
        
        try:
            # Faire la requ√™te
            response = requests.post(url, json={
                "query": query,
                "max_results": 5,
                "temperature": 0.7
            })
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get('answer', '')
                
                print(f"üì§ R√©ponse re√ßue: {len(answer)} caract√®res")
                
                # Essayer de parser la r√©ponse comme JSON
                try:
                    json_response = json.loads(answer)
                    
                    # V√©rifier la structure requise
                    required_fields = ['template', 'components']
                    missing_fields = [field for field in required_fields if field not in json_response]
                    
                    if missing_fields:
                        print(f"‚ùå Champs manquants: {missing_fields}")
                    else:
                        print("‚úÖ Structure JSON valide!")
                        
                        # Afficher un aper√ßu de la structure
                        template = json_response.get('template')
                        components_count = len(json_response.get('components', []))
                        print(f"   üìã Template: {template}")
                        print(f"   üß© Composants: {components_count}")
                        
                        # V√©rifier les composants
                        components = json_response.get('components', [])
                        if components:
                            component_types = [comp.get('type') for comp in components if isinstance(comp, dict)]
                            print(f"   üè∑Ô∏è Types: {', '.join(set(component_types))}")
                    
                except json.JSONDecodeError as e:
                    print(f"‚ùå Erreur de parsing JSON: {e}")
                    print(f"üìÑ D√©but de la r√©ponse: {answer[:200]}...")
                
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print("‚ùå Impossible de se connecter au serveur. Assurez-vous qu'il est d√©marr√©.")
            return False
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        print("-" * 50)
    
    return True

def test_specific_json_structure():
    """Teste une requ√™te sp√©cifique et affiche le JSON complet"""
    
    url = "http://localhost:8000/query"
    query = "Cr√©er une page qui affiche tous nos produits en grille"
    
    print(f"üîç Test d√©taill√© avec: {query}\n")
    
    try:
        response = requests.post(url, json={
            "query": query,
            "max_results": 5,
            "temperature": 0.7
        })
        
        if response.status_code == 200:
            data = response.json()
            answer = data.get('answer', '')
            
            try:
                json_response = json.loads(answer)
                print("üìã JSON g√©n√©r√©:")
                print(json.dumps(json_response, indent=2, ensure_ascii=False))
                
                # Validation d√©taill√©e
                print("\nüîç Validation:")
                
                # V√©rifier template
                template = json_response.get('template')
                valid_templates = ['base', 'centered', 'grid', 'dashboard', 'landing']
                if template in valid_templates:
                    print(f"‚úÖ Template valide: {template}")
                else:
                    print(f"‚ùå Template invalide: {template}")
                
                # V√©rifier components
                components = json_response.get('components', [])
                if isinstance(components, list) and len(components) > 0:
                    print(f"‚úÖ Composants pr√©sents: {len(components)}")
                    
                    for i, comp in enumerate(components):
                        if isinstance(comp, dict) and 'type' in comp:
                            comp_type = comp['type']
                            props = comp.get('props', {})
                            print(f"   {i+1}. {comp_type} (props: {len(props)})")
                        else:
                            print(f"   {i+1}. ‚ùå Composant mal form√©")
                else:
                    print("‚ùå Aucun composant trouv√©")
                
                # V√©rifier templateProps
                template_props = json_response.get('templateProps')
                if template_props:
                    print(f"‚úÖ TemplateProps pr√©sent: {list(template_props.keys())}")
                else:
                    print("‚ÑπÔ∏è TemplateProps optionnel absent")
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå Erreur JSON: {e}")
                print(f"üìÑ R√©ponse brute:\n{answer}")
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    print("üöÄ Test du format JSON pour le syst√®me de rendu de composants\n")
    
    # Test g√©n√©ral
    test_json_response()
    
    print("\n" + "=" * 60 + "\n")
    
    # Test d√©taill√©
    test_specific_json_structure()
    
    print("\n‚ú® Tests termin√©s!")