#!/usr/bin/env python3
"""
Script de test pour v√©rifier le fonctionnement du syst√®me de sessions
"""

import requests
import json
import time

# Configuration
BASE_URL = "http://localhost:8000"

def test_session_workflow():
    """Test complet du workflow de sessions"""
    print("üß™ Test du syst√®me de sessions")
    print("=" * 50)
    
    # 1. Cr√©er une nouvelle session
    print("\n1. Cr√©ation d'une nouvelle session...")
    session_data = {
        "title": "Test Session - Produits E-commerce"
    }
    
    response = requests.post(f"{BASE_URL}/sessions", json=session_data)
    if response.status_code == 200:
        session_info = response.json()
        session_id = session_info["session_id"]
        print(f"‚úÖ Session cr√©√©e: {session_id}")
        print(f"   Titre: {session_info['title']}")
        print(f"   Cr√©√©e le: {session_info['created_at']}")
    else:
        print(f"‚ùå Erreur cr√©ation session: {response.status_code}")
        return
    
    # 2. Poser une premi√®re question
    print("\n2. Premi√®re question dans la session...")
    query_data = {
        "query": "Quels sont les produits disponibles?",
        "session_id": session_id,
        "max_results": 5
    }
    
    response = requests.post(f"{BASE_URL}/query", json=query_data)
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ R√©ponse re√ßue (session: {result.get('session_id', 'N/A')})")
        print(f"   R√©ponse: {result['answer'][:100]}...")
        print(f"   Sources: {len(result['sources'])} documents")
    else:
        print(f"‚ùå Erreur requ√™te: {response.status_code}")
        return
    
    # 3. Poser une question de suivi
    print("\n3. Question de suivi dans la m√™me session...")
    query_data = {
        "query": "Peux-tu me donner plus de d√©tails sur le premier produit?",
        "session_id": session_id,
        "max_results": 3
    }
    
    response = requests.post(f"{BASE_URL}/query", json=query_data)
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ R√©ponse de suivi re√ßue")
        print(f"   R√©ponse: {result['answer'][:100]}...")
    else:
        print(f"‚ùå Erreur requ√™te de suivi: {response.status_code}")
    
    # 4. R√©cup√©rer l'historique de la session
    print("\n4. R√©cup√©ration de l'historique...")
    response = requests.get(f"{BASE_URL}/sessions/{session_id}/history")
    if response.status_code == 200:
        history = response.json()
        print(f"‚úÖ Historique r√©cup√©r√©: {len(history['messages'])} messages")
        for i, msg in enumerate(history['messages']):
            print(f"   {i+1}. [{msg['role']}] {msg['content'][:50]}...")
    else:
        print(f"‚ùå Erreur r√©cup√©ration historique: {response.status_code}")
    
    # 5. Lister toutes les sessions
    print("\n5. Liste de toutes les sessions...")
    response = requests.get(f"{BASE_URL}/sessions")
    if response.status_code == 200:
        sessions = response.json()
        print(f"‚úÖ {len(sessions['sessions'])} session(s) trouv√©e(s)")
        for session in sessions['sessions']:
            print(f"   - {session['session_id']}: {session['title']} ({session['message_count']} messages)")
    else:
        print(f"‚ùå Erreur liste sessions: {response.status_code}")
    
    # 6. Mettre √† jour le titre de la session
    print("\n6. Mise √† jour du titre de session...")
    update_data = {
        "title": "Session Test - Produits E-commerce (Modifi√©e)"
    }
    
    response = requests.put(f"{BASE_URL}/sessions/{session_id}", json=update_data)
    if response.status_code == 200:
        print("‚úÖ Titre de session mis √† jour")
    else:
        print(f"‚ùå Erreur mise √† jour: {response.status_code}")
    
    print("\n" + "=" * 50)
    print("üéâ Test termin√©!")
    print(f"Session de test cr√©√©e: {session_id}")
    print("Vous pouvez maintenant tester manuellement avec cette session.")

def test_without_session():
    """Test d'une requ√™te sans session_id (cr√©ation automatique)"""
    print("\nüß™ Test sans session_id (cr√©ation automatique)")
    print("=" * 50)
    
    query_data = {
        "query": "Comment puis-je contacter le support?",
        "max_results": 3
    }
    
    response = requests.post(f"{BASE_URL}/query", json=query_data)
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Session cr√©√©e automatiquement: {result.get('session_id', 'N/A')}")
        print(f"   R√©ponse: {result['answer'][:100]}...")
    else:
        print(f"‚ùå Erreur: {response.status_code}")

if __name__ == "__main__":
    try:
        # V√©rifier que le serveur est accessible
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code != 200:
            print("‚ùå Serveur non accessible. Assurez-vous qu'il est d√©marr√© sur le port 8000.")
            exit(1)
        
        print("‚úÖ Serveur accessible")
        
        # Ex√©cuter les tests
        test_session_workflow()
        test_without_session()
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur.")
        print("   Assurez-vous que le serveur est d√©marr√© avec: python main.py")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")